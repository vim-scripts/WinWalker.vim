*WinWalker.txt* v1.2 : Vim windows navigator/manager 


	Table Of Contents: ~

	|WW_Features|
	|WW_Initial_Set_Up|
	|WW_Commands|
		|WW_Starting|
		|WW_Main_Menu|
		|WW_Misc_Menu|
		|WW_Tab_Menu|
		|WW_Save_Menu|
		|WW_Customizing|
	|WW_Notes_Other_Bugs|


	|Turn_folding_on|
	|Turn_folding_off|


  Features:                                            *WW_Features* {{{~

	-	Navigate and manage windows and layouts with blinding speed!

	-	Multiple window operations are faster and easier because it creates
		a window navigation and management mode where all window commands
		are familiar single chars,  i.e.  h,H,^H  and j,J,^J  etc.  If you
		weren't using Vim in full-screen mode, you'll start considering it.

	-	More added functionality:

		-	Windows are considered movable objects:

			-	Enhanced push/drag for windows and buffers.

			-	Push/drag/exchange buffers between windows, and windows
				between tabs.  Use adjacent tabs as if they were extensions
				of the current visible screen.

		-	Quick search/jump to any window in any tab by giving the first
			unique char(s).  It jumps to a buffer's window, instead of the
			default action of editing buffers in the current window.

		-	More intuitive for many operations:
			
			-	Incremental resizing is easier, using the [HJKL] and
				[^h^j^k^l].

			-	Resize in the direction specified, unlike  wincmd + - < > 

			-	Windows move/push past each other more like you'd expect.
				They can push 'between', instead of just 'maximize at far
				side'.

		-	Other usability stuff:

			-	A window-level jump list for ^I/^O  movement.

			-	O/^O  as a tab-capable alternative to ^Wo .

	-	All the commands are presented as a prompt menu in the command line
		so forgetting stuff isn't a problem.

	-	Many of the commands are the same as the default Vim window  ^W  and
		'wincmd' for easy transition, others are shifted around to be more
		consistent.

	-	Different invocation modes:  |WW_timeoutlen| for menu, key pass-through.
		The goal is to have the menu mode there when you want it, and keep
		quiet otherwise.  Experiment with the different methods to find
		what works best for you.


 }}}



	Initial Set Up:                                 *WW_Initial_Set_Up* {{{~

		-	Unzip the distribution file above your plugin to extract:
>
				plugin/WinWalker.vim
				plugin/Char_menu.vim
				doc/WinWalker.txt
<

		-	Set up a key map.  I.e.
>
				nmap <silent> <Leader>w :call WinWalkerMenu()<CR>
<
					Default.  I like it mapped to ^W, since I'm used to
					hitting ^W for windows stuff, and WinWalker is mostly a
					superset of the standard ^W/wincmd commands.

		-	Look through the |WW_Misc_Menu| and |WW_Customizing| for other
			options to change.


}}}



                             Commands:                   *WW_Commands*  {{{~


	Starting:                                          *WW_Starting*   {{{~

				Assuming you decide to map ^W :
>
		nnoremap <silent> <C-W> :call WinWalkerMenu()<CR>
<
			<C-W>

				-	Type <C-W> and note the delay (~1/2 sec) before the menu
					starts.  

				-	Type <C-W>j (or whatever) fast together, and it
					should move down one window without starting the menu.  

				-	Decide whether you want more or less time to type the
					second char before the menu starts.  

				-	Change the timeoutlen in {m}isc
					menu -> {t}imeoutlent ( |WW_timeoutlen| ).

			<C-W><SPACE>

				This starts the menu immediately without the initial
				timeoutlen.  (For us impatient people :-)  Set timeoutlen to 0
				for a similar effect.

			See also |WW_Customizing|


}}}


	Main Menu: 	                                     *WW_Main_Menu* {{{~


		{w}/{W}/{<C-W>}indow=>Nxt/Prv

				Move through the window list, same as default behavior.


		{k}/{K}/{<C-K>}=up
		{j}/{J}/{<C-J>}=down
		{h}/{H}/{<C-H>}=left
		{l}/{L}/{<C-L>}=right

				There are three general kinds of move operations with Vim
				windows that are handled here:  
				1)	moving a cursor from one window into another, 
				2)	moving a buffer from one window to another, without
					creating or destroying windows , 
				3)	moving a window (and its buffer and cursor) to a new
					location, causing the layout to rearrange.

				The above key commands are set up along those lines:

			-	Lowercase='move cursor to another window'
			-	Uppercase='push the current window up/down/left/right'
			-	Control='exchange buffers, keep focus with buffer'
				(when exchanging to an adjacent tab, it relocates the
				buffer into a new window, since it's more confusing
				otherwise).
			-	Arrow keys are mapped to analogous [jkhl] commands, i.e.
				<S-UP> is mapped to 'K'.


		{r}/{R}=rotate wins/buffers

			{r}	Rotates the current window according to new/vnew.  It isn't
				smart about detecting the orientation of a window it
				hasn't seen before, so you might have to hit "r" twice to
				get it started.

			{R}	Rotate all the buffers around the windows in the screen
				without changing the window layout.

		{o}/{O}='only'/clone

			{o}	The default 'wincmd' behavior where all windows are closed
				but the current.  
				
			{O}	Clone the current buffer in it's own new tab.  This is for
				when you want to temporarily maximize the current window
				without changing any others.  If <C-O> ( <C-W><C-O> from Vim
				Normal ) is the first command used to leave, it will close the
				window, and return to the origination.
			
		{<C-I>}/{<C-O>}=jump forward/back

				Traverses WinWalker's window-level jump list.  (As opposed
				to the Vim Normal mode ^I/^O, which traverses a buffer-level
				jump list.)

		{t}ab menu
			
				Submenu for handling tabs.  See |WW_Tab_Menu|

		{m}isc menu
				
				Submenu for setting options.  See |WW_Misc_Menu|

		{s}ave/restore menu

				Submenu for saving sessions.  See |WW_Save_Menu|

		{g}row

				Toggles "grow" mode where the shift- and control- of [jkhl]
				keys is changed to do window resizing.  This is also in the
				|WW_Misc_Menu|, but is also at the top level for convenience.
				This option is reset each time WinWalkerMenu() is called via
				^W or whatever.
				
		{n}ew win
		{v}ert new

				Same as  :new  and  :vnew  .

		{=}equalize windows

				Same as Vim default.

		{:}ex

				Prompts for a command and transfers it to  :ex  to execute.
				Saves time exiting and re-entering the menu.

		{e}dit	
				A shortcut to |:edit| without exiting the menu first.

		{/}{?}find win

				Submenu of available/loaded buffers.  Typing the first one or
				so unique leading characters jumps to the matched window.
				Buffer name or number can be selected. {?} includes hidden
				buffer names.

		{c}olumn preset ( lines, cols, actually)

				A quick set option to resize the current window to user's
				preferred working dimensions, I.e. 80 columns, and 15 lines.
				{C} prompts for lines and cols.

		:{q}uit/:{Q}uit!/{<C-Q>}=tabclose!/{Z}Z
				
				Sends various quit commands.

		{<SPACE>}/{<ESC>}=>Exit

				Exit the WinWalker subsytem.  <C-C> and <BS> also work.  If
				<C-W><SPACE>, <C-W><C-SPACE>, <C-W><CR>, <C-W><C-CR> are
				entered before the timeoutlen (before the menu starts), it
				the reverse effect, and bypasses the timeoutlen, and starts
				the menu immediately.

 		Any other keys

 				... are delivered to Normal mode, and the menu exits.  So,
 				typing ^U, ^D, ^F, ^B  exits WinWalker, and scroll the
 				window.

 }}}


	Misc Menu:                                        *WW_Misc_Menu* {{{~


		{g}row

			Toggle whether the [jkhl] uppercase and control keys are used
			to resize windows.

		{w}rap

			Set wrap behavior:
				None :	default Vim
				Win :	wrap at top/bottom/left/right sides of screen
				tabs :	wrap into adjacent tabs at R/L sides of screen

		{m}enu

			Set whether full prompt is shown for the main menu.

		{h}ighlight current win 

			Toggle highlighting of the current window.  The highlighting is
			done to help distinguish which window is current, since the
			cursor won't be visible.

		{e}mpty files

			Same as highlighting, above, but add some text to empty files
			to help distinguish as current window.

		{t}imeoutlen  *WW_timeoutlen*

			Set the timeoutlen used for the wait for the key press after ^W
			(or whatever) in Vim Normal mode.  If the second key is
			received before the timeoutlen, the command is executed and
			control returns immediately to Vim Normal.  If timeoutlen is
			reached, the main menu starts and subsequent commands require
			only one key.  Control is kept by WinWalker until the menu is
			exited.

			It is analogous to the Vim |timeoutlen|, but it is an
			independent internal value.

			This also affects the timeoutlen for ambiguous matches in the
			{/}find command (using the Char_menu function).

		{j}ump list

			Show the window-level jump list (like |:jumps| ).

		{k}ey remap

			Remap single keys.  No nesting.

		{d}ropout keys

			Change keys in the list which causes the main menu to exit
			after execution.  This is most useful for when |WW_timeoutlen|
			is set to 0.  See |WW_Customizing|

		Note: the g:WinWalker_opts.rc_file is updated when the Misc menu is
		exited.

}}}


	Tab Menu:                                         *WW_Tab_Menu*   {{{~

				Note:  The prev/next commands for tabs are down in a
				submenu because I found that, in general, it's more
				consistent to move through tabs using the window left/right
				when wrap=tabs.

		{h}/{l}
				Go to prev/next tab.

		{H}/{L}
				Move/rotate tab.  Changes the order of the tab in the tab
				line list.

		{n}ew tab

				See :help tabpage  ;-)

		{t}ab table
				
				Run  |:tabs|

		{q}/{C-Q>=:tabclose/:tabclose!

 }}}


	Save Menu:                                         *WW_Save_Menu*   {{{~

		Save {d}irectory
				
				Directory to hold the Session files.  Default is |$HOME|.

		{s}ave session
				
				Save the current session with 'tabpages' session option to the
				file prompted for, using the above directory as the starting
				point.  Any filename can be used, but the prefix 'Session.' is
				used as a default to help filter the completion list more
				quickly.  If the completion key (^D or <TAB>) is pressed when
				only a single file can be completed, a summary is show, per
				the {l}ist sessions command format, below.

		{t}ab save session

				Same as above, but without the 'tabpages' session option, so
				saves only the current tab.

		{r}estore session

				Restore a session file, with the usual defaults and prefixes.

		{l}ist sessions
			
				Lists the Session.* files in the current and default
				directories.  It shows a summary of the buffers, and their tabs,
				stored in the session files.

 }}}


	Customizing:                                     *WW_Customizing* {{{~

		-	g:WinWalker_opts.rc_file  sets the filename for the options
			settings.  Default is  $HOME/.WInWalker.vim .  Most of the
			global option variables are handled here, so they don't need to
			go into your .vimrc.  The  g:WinWalker_opts.rc_file  file is
			sourced once only, when the plugin is first read when Vim
			starts up.
		
		-	Highlighting overrides can be done by copying the  s:Hi_init()
			function into your  .vimrc , and making changes there. 

		-	You can set certain keys to drop out of (bypass) the menu
			automatically and return to Vim Normal mode with this var:
>				
				let g:WinWalker_dropout_keys = [ "\<C-W>", "\<C-P>" ]
<


			This is most useful for when timeoutlen is set to 0.  For example:

			With timeoutlen > 0, typing ^W^W fast from Vim Normal mode will
			move to the next window without starting the menu.

			With timeoutlen = 0, the first  ^W  will start the menu, and the
			second  ^W  will move to the next window, and then leave you back
			in the menu, regardless of how fast you type them.

			With  ^W  set in the dropout keys list,  ^W^W  from Vim Normal
			mode will behave the same regardless of timeoutlen.

		-	Single keys can be remapped via  g:WinWalker_remap  dict var.
			You can put it into your .vimrc, but it probably easier to use
			it through the {m}isc menu.
	
 }}}

 End Commands fold }}}



{{{	*WW_Notes_Other_Bugs*


	Notes: ~

	-	Since this uses Vim7 tabs extensively, see  TabLineSet.vim  for
		better visual information in the tabs themselves.

 	-	Don't map a key that also has other operator-pending maps, i.e.
 		trying to map  ^W  while there were still other mappings like
 		custom  ^W^O  will cause it to wait (forever, possibly) for the
 		second key, which keeps the main menu from starting.

	-	Removing a tab, or re-arranging windows can invalidate parts of the
		jumplist, which will become somewhat unpredictable until it clears
		all the bad jumps as they are encountered.


	Other: ~

		-	Make some test tabs:
>
			map ,t <c-w>Nnvnvnv

			map ,tt <C-W>N:Tlist<CR>hn:Explore<CR><CR>:copen<CR>H:help WinWalker<CR>Lnesomefile<CR>=c<SPACE>asome stuff<ESC>
				<C-W>				calls WinWalkerMenu function
				N					opens a new tab
				:Tlist<CR>			opens Taglist using the  :  pass-through
				h					move left one window (return into Taglist)
				n					open a new window horizontally
				:Explore<CR><CR>	Run Explore in the new window, don't
									know why it needs two <CR>s
				:copen<CR>			open the quickfix window
				H					push it left in line vertically with
									Tlist and Explore
				:help WinWalker<CR>	open a help window
				L					push it right
				n					open a new window below the help
				etmpfile<CR>		open 'tmpfile' in it using 'e' quick
									edit
				=					equalize all the windows
				c					resize 'tmpfile' window to preset
				<SPACE>				exit WinWalker
				asome stuff<ESC>	put some stuff into 'tmpfile'
<

		-	Mappings to resize with shift-arrows from Normal mode, using the
			pass-through of the default  wincmd  resizing commands:
>
			nmap <c-up> <c-w>+
			nmap <c-down> <c-w>-
			nmap <c-left> <c-w><
			nmap <c-right> <c-w>>
<
			Mappings which use the modified resize commands:
>
			nmap <c-up> <c-w>g<c-k>
			nmap <c-down> <c-w>g<c-j>
			nmap <c-left> <c-w>g<c-h>
			nmap <c-right> <c-w>g<c-l>
<
			If timeoutlen is 0, these maps will have to explicitly exit the
			menu to be used from Vim Normal mode directly.

>
			nmap <expr> <s-up> ( g:WinWalker_opts.timeoutlen ? '<c-w>gK' : '<c-w>gK<space>' )
			nmap <expr> <s-down> ( g:WinWalker_opts.timeoutlen ? '<c-w>gJ' : '<c-w>gJ<space>' )
			nmap <expr> <s-left> ( g:WinWalker_opts.timeoutlen ? '<c-w>gH' : '<c-w>gH<space>' )
			nmap <expr> <s-right> ( g:WinWalker_opts.timeoutlen ? '<c-w>gL' : '<c-w>gL<space>' )

			nmap <expr> <c-up> ( g:WinWalker_opts.timeoutlen ? '<c-w>g<c-k>' : '<c-w>g<c-k><space>' )
			nmap <expr> <c-down> ( g:WinWalker_opts.timeoutlen ? '<c-w>g<c-j>' : '<c-w>g<c-j><space>' )
			nmap <expr> <c-left> ( g:WinWalker_opts.timeoutlen ? '<c-w>g<c-h>' : '<c-w>g<c-h><space>' )
			nmap <expr> <c-right> ( g:WinWalker_opts.timeoutlen ? '<c-w>g<c-l>' : '<c-w>g<c-l><space>' )
<

	-	Some apps like 'Taglist' and 'quickfix window' set 'bufhidden',
		which interfers with window moving/exchanging.  This is mostly
		dealt with, but other app.s like 'Project.vim' reset the window
		every time the buffer is entered, which isn't handled (probably
		can't be without changing the application itself).


	Bugs:~

	-	The cmdheight isn't always restored correctly at this time.  As of
		Vim70c, a bug exists for setting/resetting the value in different
		tabs.  It seems to be better with 70d, but not all cmdheight issues
		are resolved.

	-	The error message as received by the {:}  and {e} commands sometimes
		return something which seems unrelated.

	-	As of Vim70d, there is a problem with using <expr>, so this form:

			nnoremap <expr> <c-w> WinWalkerMenu()

		does not allow subsequent mappings like:

			nmap <s-up> <c-w>g<c-k>

		use instead,

			nnoremap <silent> <c-w> :call WinWalkerMenu()<CR>
	
	-	Sometimes a weird delay is added to the {m}isc menu as it returns
		to main.


}}} End Notes fold


vim7:ft=help:norl:ts=4:sw=4
